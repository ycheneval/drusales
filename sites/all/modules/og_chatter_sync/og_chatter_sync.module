<?php

/**
 * @file
 * API and module for Salesforce integration.
 */

module_load_include('inc', 'chatter', 'includes/chatter');

/**
 * Implements hook_menu().
 */
function og_chatter_sync_menu() {
  $items = array();

  $items['admin/config/og_chatter_sync'] = array(
    'title' => 'Chatter',
    'description' => 'Chatter settings.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  $items['admin/config/og_chatter_sync/authorize'] = array(
    'title' => 'Authorize',
    'description' => 'Authorize this website to communicate with Salesforce.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_chatter_sync_oauth_form'),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['og_chatter_sync/oauth_callback'] = array(
    'title' => 'Chatter oauth callback',
    'page callback' => 'og_chatter_sync_oauth_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
/*
  $items['admin/structure/salesforce'] = array(
    'title' => 'Salesforce',
    'description' => 'Configuration for Salesforce integration.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer salesforce'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
*/
  return $items;
}

/**
 * Implements hook_permission().
 */
/*
function salesforce_permission() {
  return array(
    'administer salesforce' => array(
      'title' => t('administer salesforce'),
      'description' => t('Administer Salesforce integration.'),
      'restrict access' => TRUE,
    ),
  );
}
*/

/**
 * Implements hook_flush_caches().
 */
/*
function salesforce_flush_caches() {
  return array('cache_salesforce_object');
}
*/
/**
 * Generate the Salesforce authorization form.
 *
 * @return array
 *   The Salesforce authorization form.
 */
function og_chatter_sync_oauth_form() {
  $form = array();

  $consumer_key = variable_get('salesforce_consumer_key', FALSE);
  $consumer_secret = variable_get('salesforce_consumer_secret', FALSE);

  $form['message'] = array(
    '#type' => 'item',
    '#markup' => t('Authorize this website to communicate with Salesforce by entering the consumer key and secret from a remote application. Clicking authorize will redirect you to Salesforce where you will be asked to grant access.'),
  );

  $form['salesforce_consumer_key'] = array(
    '#title' => t('Salesforce consumer key'),
    '#type' => 'textfield',
    '#description' => t('Consumer key of the Salesforce remote application you want to grant access to'),
    '#required' => TRUE,
    '#default_value' => $consumer_key,
  );
  $form['salesforce_consumer_secret'] = array(
    '#title' => t('Salesforce consumer secret'),
    '#type' => 'textfield',
    '#description' => t('Consumer secret of the Salesforce remote application you want to grant access to'),
    '#required' => TRUE,
    '#default_value' => $consumer_secret,
  );
  $form['submit'] = array(
    '#value' => t('Authorize'),
    '#type' => 'submit',
  );

  // If we're authenticated, show a list of available REST resources.
  if ($consumer_key && $consumer_secret) {
    $sfapi = new Chatter($consumer_key, $consumer_secret);
    // If fully configured, attempt to connect to Salesforce and return a list
    // of resources.
    if ($sfapi->isAuthorized()) {
      try {
        $resources = $sfapi->listResources();
        foreach ($resources as $key => $path) {
          $items[] = $key . ': ' . $path;
        }
        $form['resources'] = array(
          '#title' => t('Your Chatter instance is authorized and has access to the following resources:'),
          '#type' => 'item',
          '#markup' => theme('item_list', array('items' => $items)),
        );
      }
      catch(ChatterException $e) {
        drupal_set_message($e->getMessage(), 'warning');
      }
    }
    else {
      drupal_set_message(t('Chatter needs to authorized to connect to this website.'));
    }
  }

  return $form;
}

/**
 * Submit handler for salesforce_oauth_form().
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function og_chatter_sync_oauth_form_submit($form, &$form_state) {
  $consumer_key = $form_state['values']['salesforce_consumer_key'];
  $consumer_secret = $form_state['values']['salesforce_consumer_secret'];
  variable_set('salesforce_consumer_key', $consumer_key);
  variable_set('salesforce_consumer_secret', $consumer_secret);
  drupal_set_message($consumer_key);
  $chatter = new Chatter($consumer_key, $consumer_secret);
  $chatter->getAuthorizationCode();
}

/**
 * Callback for the oauth redirect URI.
 *
 * Exchanges an authorization code for an access token.
 */
function og_chatter_sync_oauth_callback() {
  $chatter = chatter_get_api();
  $chatter->requestToken($_GET['code']);

  drupal_set_message('Chatter OAUTH2 authorization successful.');

  // Rebuild the menu so the mappings links are now available.
  menu_rebuild();

  drupal_goto('admin/config/og_chatter_sync/og_chatter_sync');
}

/**
 * Wrapper around the API constructor passing consume key and secret.
 *
 * @return Chatter
 *   Returns a Chatter class object.
 */

function chatter_get_api() {
  return new Chatter(
    variable_get('salesforce_consumer_key', ''),
    variable_get('salesforce_consumer_secret', '')
  );
}


