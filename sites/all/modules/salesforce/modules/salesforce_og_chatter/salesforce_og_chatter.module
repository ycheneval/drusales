<?php
/**
 * Implements hook_menu().
 *
 */
function salesforce_og_chatter_menu() {
  $items['salesforce_og_chatter'] = array(
    'title' => 'Page Example',
    'page callback' => 'salesforce_og_chatter_callback',
    'access callback' => 'salesforce_og_chatter_callback_access',
  );
  return $items;
}

/**
 * Access callback for salesforce_og_chatter in salesforce_og_chatter_menu
 *
 */
function salesforce_og_chatter_callback_access() {
  return TRUE;
}

/**
 * Performs a call to the Chatter REST API and handling
 * paginated results
 *
 * @param $query
 * @param $entity
 * @return array
 */
function salesforce_og_chatter_paginated_call($query, $entity) {
  $instance = salesforce_get_api();
  $results = array();
  var_dump('Calling "'.$query.'", $entity: '.$entity);
  $results_paginated = $instance->apiCall($query);
  $results = array_merge($results, $results_paginated[$entity]);
  var_dump('Results "'.$results.'"');

  if (key_exists('nextPageUrl', $results_paginated)) {
      while ($next_page = $results_paginated['nextPageUrl']) {
        $next_page = substr($next_page, 21); //@todo : More clever filter
        $results_paginated = $instance->apiCall($next_page);
        $results = array_merge($results, $results_paginated[$entity]);
        break;
      }
  }
  return $results;
}

function dpal_og_create_or_update($sfGroup)
{
    $owner_uid = 1;
    $sfid = $sfGroup['Id'];
    // Check if node already exists
    $result = new EntityFieldQuery();
    $result->entityCondition('entity_type', 'node')
            ->EntityCondition('bundle', 'group')
            ->fieldCondition('field_sfid', 'value', $sfid)
            ->execute();

    if (empty($result->ordered_results)) {
        $node = new stdClass();
        $node->type = 'group';
        node_object_prepare($node);
        $didChange = true;
    } else {
        $node = node_load((int) $result->ordered_results[0]->entity_id);
        $didChange = false;
    }
    
    //$groupnode = new stdClass();
    $node->status = 1;
    $node->language = 'und';
    $node->comment = 2;     // 0 = no, 1 = closed (read only), 2 = open (read/write)
    $node->uid = $owner_uid;
    $node->field_sfid['und'][0]['value'] = $sfid;
    $node->title = $sfGroup['Name'];
//    $groupnode->body = $body;
    $node->body = '';
//    $node->og_roles_permissions['und'][0]['value'] = 1; // Override default role and permissions
    $node->og_roles_permissions['und'][0]['value'] = 0;
    $node->group_access['und'][0]['value'] = 0;     // Public
//    $node->group_access['und'][0]['value'] = 1;     // Private
    $node->field_radioactivity['und'][0]['value'] = 8;
    
//    $groupnode->og_selective = $group_acces_level;
//    $groupnode->og_register = OG_REGISTRATION_NEVER;
//    $groupnode->og_directory = OG_DIRECTORY_CHOOSE_FALSE;
//    $groupnode->og_private = variable_get('og_private_groups', OG_PRIVATE_GROUPS_CHOOSE_FALSE);
//    $groupnode->{_integration_cGroupType}[0]['value'] = $cGroupType_content; // CCK field

    node_save($node);

    if ($node->nid) {
//      og_insert_group($node);
//
//      // Set space (if spaces_og is used)
//      //$ogspace = spaces_load('og', $groupnode->nid, TRUE);
//      //$ogspace->controllers->variable->set('spaces_preset_og', $spacepreset);
//
//      og_save_subscription($node->nid, $owner_uid, array('is_active' => 1, 'is_admin' => 1));
    } else {
      dpm('OG creation failed :(');
    }

}
/**
 * Get all Chatter groups
 *
 * @return array
 */
function salesforce_og_chatter_get_groups() {
//    return salesforce_og_chatter_paginated_call('chatter/groups', 'groups');
    $query = new SalesforceSelectQuery("Group");
    $query->fields = array('CreatedById', 'CreatedDate', 'Email', 'Id', 'DoesIncludeBosses', 'LastModifiedById', 'LastModifiedDate', 'Name', 'OwnerId', 'RelatedId', 'DoesSendEmailToMembers', 'SystemModstamp', 'Type');
    $query->addCondition('Type', "'Regular'");
    $api = salesforce_get_api();
    $results = $api->query($query);
    $i = 0;
    foreach ($results['records'] as $aGroup) {
        var_dump($aGroup);
        dpal_og_create_or_update($aGroup);
        $i++;
//        $members = salesforce_og_chatter_get_group_members($aGroup['Id']);
//        var_dump($members);
//        $comment = salesforce_og_chatter_paginated_call(substr($aRecord['attributes']['url'], 21), 'attributes');   
        if ($i > 3) { break; }
    }
    var_dump('Found '.count($results['records']).' items.');

}

/**
 * Get members of a group
 *
 * @param $group
 * @return array
 */
function salesforce_og_chatter_get_group_members($groupId) {
    $query = new SalesforceSelectQuery("GroupMember");
    $query->fields = array('UserOrGroupId');
    $query->addCondition('GroupId', "'".$groupId."'");
    $api = salesforce_get_api();
    $results = $api->query($query);
    foreach ($results['records'] as $item) {
        var_dump($item);
    }
    return $results;
}

/**
 * Callback for salesforce_og_chatter in salesforce_og_chatter_menu
 * @todo After dev, remove this function
 */
function salesforce_og_chatter_callback() {
  $instance = salesforce_get_api();
  $query = urlencode("SELECT Id from Account LIMIT 1");
  $results = $instance->query($query);
  $accounts = array();
  foreach ($results['records'] as $key => $item) {
    $accounts[] = $item['Id'];

  }
  $query = urlencode("SELECT Id from Account LIMIT 1");
  $results = $instance->query($query);
  //var_dump($results);

  //var_dump($accounts);
  $result = salesforce_og_chatter_paginated_call('chatter/groups', 'groups');
  foreach ($result as $$key => $item) {
    //var_dump($item['name']);
    $members = salesforce_og_chatter_get_group_members($item);
    var_dump($members);
  }
  return 'yeah';

  //var_dump($result);
  /*
      foreach($accounts as $key => $value) {
        $result = $this->apiCall('chatter/users/' . $value);
        var_dump($result['photo']['largePhotoUrl']);

      }
      var_dump($result);
  */

  //$url = "$instance_url/services/data/v20.0/query?q=" . urlencode($query);
  /*
      $curl = curl_init($url);
      curl_setopt($curl, CURLOPT_HEADER, false);
      curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($curl, CURLOPT_HTTPHEADER,
        array("Authorization: OAuth $access_token"));

      $json_response = curl_exec($curl);
      curl_close($curl);

      $response = json_decode($json_response, true);

      $total_size = $response['totalSize'];

      echo "$total_size record(s) returned<br/><br/>";
      foreach ((array) $response['records'] as $record) {
        echo $record['Id'] . ", " . $record['Name'] . "<br/>";
      }
      echo "<br/>";
      */
}

/**
 * Get all Chatter feeds
 *
 * @return array
 */
function salesforce_og_chatter_get_feeds() {
  return salesforce_og_chatter_paginated_call('chatter/feeds', 'feeds');
}
