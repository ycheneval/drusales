<?php

class SalesforceLogin extends Salesforce {
  /**
   * OAuth 2.0 Username-Password Flow
   *
   * @param $user
   * @param $password
   * @return bool
   */
  public function getSession($user, $password) {
    $data = drupal_http_build_query(array(
      'grant_type' => 'password',
      'client_id' => $this->consumer_key,
      'client_secret' => $this->consumer_secret,
      'username' => $user,
      'password' => $password,
    ));

    $url = $this->login_url . '/services/oauth2/token';
    $headers = array(
      // This is an undocumented requirement on SF's end.
      'Content-Type' => 'application/x-www-form-urlencoded',
    );
    $response = $this->httpRequest($url, $data, $headers, 'POST');
    $data = drupal_json_decode($response->data);

    if ($response->code != 200) {
      $error = isset($data['error_description']) ? $data['error_description'] : $response->error;
      watchdog('salesforce', 'Authentication error: %error %text', array(
          '%error' => $data['error'],
          '%text' => $error
        )
        , WATCHDOG_INFO);
      return FALSE;
    }

    if (!($data['signature'] ===
      base64_encode(hash_hmac('sha256', $data['id'] . $data['issued_at'], $this->consumer_secret, TRUE)))
    ) {
      watchdog('salesforce', 'Invalid server HMAC signature', array(), WATCHDOG_ALERT);
      return FALSE;
    }

    $this->setAccessToken($data['access_token']);
    $this->setIdentity($data['id']);
    $this->setInstanceUrl($data['instance_url']);

    return TRUE;
  }
}

/**
 * Implements hook_form_alter().
 */
function salesforce_login_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'user_login') !== FALSE) {
    // Add validation handler in the right place.
    $final_validate = array_pop($form['#validate']);
    array_push($form['#validate'], 'salesforce_login_login_validate', $final_validate);
  }
}

/**
 * Validation callback used by user auth api to deal with additional validation.
 */
function salesforce_login_login_validate($form, &$form_state) {
  if (array_key_exists('uid', $form_state) && ($form_state['uid'] == 1)) {
    return;
  }

  // Call our user auth validation.
  $result = salesforce_login_authenticate($form_state['values']);

  // If the validation has returned TRUE.
  if (!empty($result)) {
    $username = $result['nick_name'];
    $password = $form_state['values']['pass'];

    // See if we have matched a uid above 0 for this username.
    $uid = _salesforce_login_get_uid_from_username($username);

    // Only call user_external_login_register if there isn't already a user.
    if (!$uid) {
      user_external_login_register($username, 'salesforce_login');
      $account = user_external_load($username);
      // Save the password the user entered.
      user_save($account, array('pass' => $password, 'mail' => $form_state['values']['name']));
    }
    else {
      $account = user_load($uid);
      user_save($account, array('pass' => $password));
    }

    $form_state['uid'] = $account->uid;
  }
  elseif ($result === FALSE) {
    return FALSE;
  }
}

/**
 * Helper function to return a users uid based on their username.
 */
function _salesforce_login_get_uid_from_username($username) {
  return db_query('SELECT uid from {users} WHERE name = :name', array(':name' => $username))->fetchField();
}

/**
 * @param $values
 * @return array|bool
 */
function salesforce_login_authenticate($values) {
  $consumer_key = variable_get('salesforce_consumer_key', FALSE);
  $consumer_secret = variable_get('salesforce_consumer_secret', FALSE);
  if ($consumer_key AND $consumer_secret) {
    $salesforce = new SalesforceLogin($consumer_key, $consumer_secret);
    $authentication = $salesforce->getSession($values['name'], $values['pass']);
  }

  if ($authentication) {
    return $salesforce->getIdentity();
  }
  else {
    return FALSE;
  }
}