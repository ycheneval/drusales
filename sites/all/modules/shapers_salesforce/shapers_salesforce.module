<?php

class shapers_salesforce_query extends SalesforceSelectQuery {
  private $query = '';

  public function setQuery($query) {
    $this->query = ($query);
  }

  public function __toString() {
    return ($this->query);
  }

}

/**
 * Implements hook_menu().
 *
 */
function shapers_salesforce_menu() {
  $items['admin/config/salesforce/shapers_salesforce'] = array(
    'title' => 'Global Shapers SalesForce Synchronization',
    'description' => 'Configure the details of the synchronization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shapers_salesforce_admin'),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin page
 *
 * @return array
 */
function shapers_salesforce_admin() {
  $form = array();
  $form['shapers_salesforce_main_shapers_group'] = array(
    '#type' => 'select',
    '#title' => t('Parent community of the Hubs'),
    '#options' => array(0 => 'None') + shapers_salesforce_get_parent_communities(),
    '#default_value' => variable_get('shapers_salesforce_main_shapers_group', 0),
    '#description' => t('Select the Forum Community holding the Hubs'),
  );

  $form['shapers_salesforce_update_timeframe'] = array(
    '#type' => 'textfield',
    '#title' => t('How old should a change be in order to be synchronized, in days'),
    '#default_value' => variable_get('shapers_salesforce_update_timeframe', 7),
    '#size' => 2,
    '#maxlength' => 2,
  );

  return system_settings_form($form);
}

/**
 * Performs a SOQL Query on the SF Instance
 *
 * @param $query
 * @return array
 */
function shapers_salesforce_query($query) {
  $instance = salesforce_get_api();
  $results = $instance->query($query);
  return $results;
}

/**
 * Validates a Salesforce ID
 *
 * @param $id
 */
function shapers_salesforce_validate_sf_id(&$id) {
  if (!preg_match('/^[a-zA-Z0-9]+$/', $id)) {
    watchdog('shapers_salesforce', 'Not a valid id format: %string', array('%string' => $id), WATCHDOG_ALERT);
    $id = ''; // Kill it
  }
}

function shapers_salesforce_get_parent_communities() {
  $query = new shapers_salesforce_query();
  $query->setQuery("SELECT+GroupId__c,+Name+FROM+ForumCommunity__c+WHERE+GroupId__c+!=NULL");
  $results = shapers_salesforce_query($query);
  $output = array();
  if ($results['done'] AND ($results['totalSize'] > 0)) {
    foreach ($results['records'] as $item) {
      $output[$item['GroupId__c']] = $item['Name'];
    }
  }
  return $output;
}

function shapers_salesforce_get_shapers($parent_group_id) {
  shapers_salesforce_validate_sf_id($parent_group_id);
  $query = new shapers_salesforce_query();
  $sql = "SELECT+Community__c,+CreatedDate,+CurrentOrganization__c,";
  $sql .= "+CurrentOrganizationRegion__c,+CurrentOrganizationSegment__c,+CurrentPosition__c,";
  $sql .= "+IsDeleted,+ForumNetwork__c,+GS_About_Me__c,+GS_Current_Work__c,+GS_Expertise__c,+GS_Inspiration__c,+GS_Interests__c,";
  $sql .= "+GS_Local_Challenges__c,+GS_Member_Role__c,+LastModifiedDate,";
  $sql .= "+Main_Industry_Sector__c,+Main_Regional_Area_Of_Operation__c,+Name,+MemberName__c,";
  $sql .= "+PrimaryOrganization__c,+PrimaryPosition__c,+Id,+RecordTypeId,+Member_Status__c,";
  $sql .= "+MembershipType__c,+UserId__c,+MemberName__r.LastName,+MemberName__r.Description,";
  $sql .= "+MemberName__r.Id,+MemberName__r.Name,+MemberName__r.Type,";
  $sql .= "+MemberName__r.ShippingCity,+MemberName__r.City1__c,+MemberName__r.Cluster__c,+MemberName__r.CompanyName__c,";
  $sql .= "+MemberName__r.Corporate_Name__c,+MemberName__r.Country__c,+MemberName__r.Country1__c,";
  $sql .= "+MemberName__r.CreatedDate,+MemberName__r.IsDeleted,";
  $sql .= "+MemberName__r.EducationandWorkExperience__c,+MemberName__r.PersonEmail,";
  $sql .= "+MemberName__r.Expertises__c,+MemberName__r.Expertise__c,+MemberName__r.Extension__c,+MemberName__r.FirstName,";
  $sql .= "+MemberName__r.Picture__c,+MemberName__r.Handle__c,+MemberName__r.Industry,";
  $sql .= "+MemberName__r.Initials__c,+MemberName__r.InterestsHobbiesSports__c,";
  $sql .= "+MemberName__r.IsPersonAccount,+MemberName__r.LastModifiedDate,+MemberName__r.City__c,";
  $sql .= "+MemberName__r.Main_Industry_Sector__c,+MemberName__r.Main_Regional_Area_of_Operation__c,";
  $sql .= "+MemberName__r.MasterRecordId,+MemberName__r.Membership_Type__c,+MemberName__r.NR_Email__c,";
  $sql .= "+MemberName__r.Nickname__c,+MemberName__r.PersonOtherCity,";
  $sql .= "+MemberName__r.Ownership_Type__c,+MemberName__r.ParentId,+MemberName__r.PhoneticName__c,+MemberName__r.Position__c,";
  $sql .= "+MemberName__r.Primary_Organisation__c,+MemberName__r.Primary_Organization_Region__c,";
  $sql .= "+MemberName__r.Primary_Organization_Segment__c,+MemberName__r.Primary_Position__c,+";
  $sql .= "+MemberName__r.Profile__c,+MemberName__r.ProfileCompleteness__c,";
  $sql .= "+MemberName__r.RecordTypeId,+MemberName__r.Regional_Area_Of__c,+MemberName__r.Salutation,+MemberName__r.Sectors__c,";
  $sql .= "+MemberName__r.Segment__c,+MemberName__r.State__c,+MemberName__r.Status__c,+MemberName__r.SystemModstamp,";
  $sql .= "+MemberName__r.Team__c,+MemberName__r.PersonTitle,+MemberName__r.Title1__c,";
  $sql .= "+MemberName__r.Title2__c,+MemberName__r.Title3__c,+MemberName__r.ViewSocialProfile__c,+MemberName__r.Website,";
  $sql .= "+Community__r.AutoShare_Group_Ref__c,+Community__r.Chatter_Group_ID__c,+MemberName__r.TECH_SalesforceUser__c,";
  $sql .= "+Community__r.Chatter_Group_Name__c,+Community__r.Chatter_Group_Provisioning__c,+Community__r.Chatter_Group_Type__c,";
  $sql .= "+Community__r.CreatedDate,+Community__r.CuratorStatus__c,+Community__r.IsDeleted,+Community__r.Description__c,";
  $sql .= "+Community__r.DiversityStatus__c,+Community__r.EmailAddress__c,+Community__r.FacebookFeedURL__c,";
  $sql .= "+Community__r.FacebookURL__c,+Community__r.ForumNetwork__c,+Community__r.Forum_Network__c,+Community__r.GroupId__c,";
  $sql .= "+Community__r.GroupName__c,";
  $sql .= "+Community__r.HostCity__c,+Community__r.HostCountry__c,+Community__r.HostCountryHDI__c,+Community__r.Id__c,";
  $sql .= "+Community__r.LastModifiedById,+Community__r.LastModifiedDate,+Community__r.Latitude__c,";
  $sql .= "+Community__r.Link_to_AutoShare_Group__c,+Community__r.Link_to_Chatter_Group__c,+Community__r.Longitude__c,";
  $sql .= "+Community__r.Main_Community__c,+Community__r.Name,";
  $sql .= "+Community__r.Number_Of_Active_Members__c,+Community__r.NumberOfMembers__c,";
  $sql .= "+Community__r.ParentGroupId__c,+Community__r.Picture__c,";
  $sql .= "+Community__r.Id,+Community__r.RecordTypeId,+Community__r.Region__c,+Community__r.Regions__c,";
  $sql .= "+Community__r.SecondaryRegion__c,+Community__r.Short_Description__c,";
  $sql .= "+Community__r.CommunityStatus__c,+Community__r.SystemModstamp,+Community__r.TwitterURL__c,";
  $sql .= "+Community__r.Web_Access__c,+Community__r.AdditionalWebsite__c";
  $sql .= "+FROM+Membership__c+WHERE+Community__r.ParentGroupId__c+='$parent_group_id'";
  $query->setQuery($sql);
  $shapers = $hubs = array();
  $results = shapers_salesforce_query($query);
  if ($results['done'] AND ($results['totalSize'] > 0)) {
    foreach ($results['records'] as $item) {
      //Extract the hub
      $hubs[$item['Community__r']['Id']] = $item['Community__r'];
      $shapers[$item['MemberName__r']['Id']] = $item;
    }
  }
  return array('hubs' => $hubs, 'shapers' => $shapers);
}

/**
 * Process a shaper from the queue.
 *
 *
 * @param $shaper
 */
function shapers_salesforce_process_shaper($shaper) {
  // check if modified recently or forced update
  $modified = new DateTime($shaper['LastModifiedDate']);
  $diff = date_diff($modified, new DateTime());
  drush_log($shaper['Name']);
  if($diff->days > 7) {
    drush_log('too old - do not process');
    return TRUE;
  }
  //var_dump(( strtotime($shaper['LastModifiedDate'])  / 1440) .  $shaper['LastModifiedDate']);
  // add picture
  $sfinstance = salesforce_get_api();
  $string = 'chatter/users/' . $shaper['MemberName__r']['TECH_SalesforceUser__c'] . '/photo';
  try {
    $photo = $sfinstance->apiCall('chatter/users/' . $shaper['MemberName__r']['TECH_SalesforceUser__c'] . '/photo');
    $info = $sfinstance->apiCall('chatter/users/' . $shaper['MemberName__r']['TECH_SalesforceUser__c']);

  } catch (exception $e) {
    $photo = FALSE;
  }
  //var_dump($info);

  // fields mapping
  $picture = $photo['largePhotoUrl'];

  // sending to website
  /*
   * $account = XMLSimplelement, $nid = int
    $node = isset($nid) ? node_load($nid) : entity_create('node', array('type' => 'shaper'));
    $wrapper = entity_metadata_wrapper('node', $node);

    // Populate a multiselect field with one or more values.
    // The keys correlate to a taxonomy term id, hence the missing value for 3.
    $expertise = array(
      0 => 'none',
      1 => 'arts',
      2 => 'business',
      4 => 'education',
      5 => 'entrepreneur',
      6 => 'fashion',
      7 => 'finance',
      8 => 'human',
      9 => 'law',
      10 =>'media',
      11 => 'politics',
      12 => 'science',
      13 => 'social',
      14 => 'sustainability',
      15 => 'health'
    );
    // Reset the field before we start to expunge old data.
    $wrapper->field_subject_tags = array();
    foreach ($expertise as $tid => $exp) {
      if ((string) $account->{"exp-$exp"} == 'true') {
        // The elements in our $expertise array are in the same order as the tids
        // in the database. This could break if the terms in the database change
        // in the future.
        try {
          $wrapper->field_subject_tags[] = $tid;
        }
        catch (EntityMetadataWrapperException $e) {
        }
      }
    }

    // Assign the user a group audience based on the value of the hub property
    // coming form Tibbr. $user_hub holds a string that should match the name of
    // a hub node, which is itself a group.
    $user_hub = (string) $account->department;
    // Look for hubs that match $user_hub.
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'hub')
      ->propertyCondition('title', $user_hub)
      ->execute();
    // If we found a hub then retrive the gid and if it's not the Global group,
    // make this shaper an audience of that group.
    if (!empty($entities['node'])) {
      $hub = reset($entities['node']);
      $group = og_get_group('node', $hub->nid);
      // @todo Figure out why this exists?
      if ($group->label != 'Global') {
        try {
          $wrapper->group_audience = array($group);
        }
        catch (EntityMetadataWrapperException $e) {
        }
      }
    }

    // Because WEF's data is not sanitized and inconsistent, we need to filter out
    // any links that aren't properly structured URLs.
    $links = array(
      'facebook' => (string) $account->facebook,
      'linkedin' => (string) $account->{'linked-in'},
      'twitter' => (string) $account->twitter,
    );
    // Loop through the links and replace any that don't start with http:// with a blank string.
    foreach ($links as &$link) {
      $link = trim($link);
      // Ignore links not starting with http://.
      if (!valid_url($link, TRUE)) {
        $link = '';
      }
    }

    // Populate other fields with Tibbr data.
    try {
      $wrapper->created = strtotime((string) $account->{'created-at'});
      $wrapper->field_tibbr_about_me->value = utf8_decode(decode_entities((string) $account->description));
      $wrapper->field_tibbr_id = (int) $account->id;
      $wrapper->field_tibbr_first_name = decode_entities((string) $account->{'first-name'});
      $wrapper->field_tibbr_last_name = decode_entities((string) $account->{'last-name'});
      $wrapper->field_tibbr_nickname = decode_entities((string) $account->nickname);
      $wrapper->field_tibbr_organization = utf8_decode((string) $account->company);
      $wrapper->field_tibbr_email = (string) $account->email;
      $wrapper->field_tibbr_facebook->url = $links['facebook'];
      $wrapper->field_tibbr_twitter->url = $links['twitter'];
      $wrapper->field_tibbr_linkedin->url = $links['linkedin'];
      $wrapper->field_tibbr_link->url = 'https://globalshapers.weforum.org' . '/tibbr/users/' . (int) $account->id . '/profile';
      $wrapper->field_tibbr_title = utf8_decode((string) $account->title);
      $wrapper->field_tibbr_username = (string) $account->login;
      $wrapper->field_joined = (string) strtotime($account->{'created-at'});
    }
    catch (EntityMetadataWrapperException $e) {
    }

    if ($media = (string) $account->{'media-profile'}) {
      try {
        $wrapper->field_video = (array) media_parse_to_file($media);
      }
      catch (Exception $e) {
      }
    }

    $fullname = $account->{'first-name'} . ' ' . $account->{'last-name'};
    $file = _weforum_tibbr_get_file((string) $account->{'profile-image-url'}, 'public://shaper-profile-images/' . strtolower(str_replace(' ', '-', $fullname)) . '-' . (string) $account->{'id'}, $fullname, FILE_EXISTS_REPLACE);
    try {
      if ($file) {
        $wrapper->field_shaper_profile_image = (array) $file;
      }
    }
    catch (EntityMetadataWrapperException $e) {
    }

    try {
      $wrapper->save();
    }
    catch(Exception $e) {
      watchdog('Weforum Tibbr save error', $e);
    }
    return $node->nid;
  }

  */
}

