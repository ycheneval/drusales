<?php

/**
 * @file
 * Allows the admin to select which ip addresses role or a user  can login from for this site
 * Some of the code below is taken from the cck_ipaddress_module
*/

/**
 * Implementation of hook_help()
 */
function restrict_by_ip_help($section) {
  $output = '';
  switch ($section) {
    case 'admin/help#restrict_by_ip':
      $output = '<p>The site administrator can limit a user to only be able to login from certain IP Addresses or ranges of IP Addresses using CIDR notation. Individual roles may also be limited to a those from specified IP addresses and rangers.</p>';
      break;
    }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function restrict_by_ip_menu() {
  $items = array();
  $items['admin/config/restrict_by_ip'] = array(
    'title' => t('Restrict by IP'),
    'description' => t('General settings for Restrict by IP module.'),
    'page callback' => 'system_admin_menu_block_page',
    'page arguments' => array('restrict_by_ip_general_settings'),
    'access arguments' => array('administer restrict by ip'),
    'file' => 'restrict_by_ip.admin.inc'
  );
  $items['admin/config/restrict_by_ip/general'] = array(
    'title' => t('General settings'),
    'description' => t('General settings for Restrict by IP module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('restrict_by_ip_general_settings'),
    'access arguments' => array('administer restrict by ip'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/restrict_by_ip/login'] = array(
    'title' => t('Restrict login by IP'),
    'description' => t('Limit the IP address a user is allowed to login from.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('restrict_by_ip_login_settings'),
    'access arguments' => array('administer restrict by ip'),
    'type' => MENU_NORMAL_ITEM,
  );
//  $items['admin/config/restrict_by_ip/login/add'] = array(
//    'title' => t('Add new login IP restriction'),
//    'description' => t('Add a new IP restriction to a user.'),
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('restrict_by_ip_login_add_edit_user'),
//    'access arguments' => array('administer restrict by ip'),
//  );
//  $items['admin/config/restrict_by_ip/login/edit/%user'] = array(
//    'title' => t('Edit existing login IP restriction'),
//    'description' => t('Edit an existing IP restriction for a user.'),
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('restrict_by_ip_login_add_edit_user', 5),
//    'access arguments' => array('administer restrict by ip'),
//  );
  $items['admin/config/restrict_by_ip/role'] = array(
    'title' => t('Restrict role by IP'),
    'description' => t('Limit the IP address range roles may accessed from.'),
    'page callback' => t('drupal_get_form'),
    'page arguments' => array('restrict_by_ip_role_settings'),
    'access arguments' => array('administer restrict by ip'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function restrict_by_ip_perm() {
  return array('administer restrict by ip');
}

/**
 * Implmentation of hook_init().
 */
function restrict_by_ip_init() {
  global $user;
  // Login restriction check moved here to prevent access from stale session data
  _restrict_by_ip_login($user);
}

/**
 * Implementation of hook_boot().
 */
function restrict_by_ip_boot() {
  global $user;
  // Call the function early in boot process to check/strip roles
  restrict_by_ip_role_check($user);
}

/**
 * Implementation of hook_user_xxx().
 */
function restrict_by_ip_user_login(&$edit, $account) {
    _restrict_by_ip_login($account);
}

function restrict_by_ip_user_insert(&$edit, $account) {
    if (strlen($edit['restrict_by_ip_address']) > 0) {
        // If an IP restriction is set, add it to database
        db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, ':rpidaddress')", array(':uid' => $edit['uid'], ':rpidaddress' => $edit['restrict_by_ip_address']));
    }
}

function restrict_by_ip_user_delete(&$edit, $account) {
    // Delete any IP restrictions for users upon account deletions
    if ($account->uid != 0) {
        db_query("DELETE FROM {restrict_by_ip} WHERE uid= :uid", array(':uid' => $account->uid));
    }
}

/**
 * Implementation of hook_theme().
 */
function restrict_by_ip_theme($existing, $type, $theme, $path) {
  return array(
    'restrict_by_ip_login_list' => array(),
  );
}

/**
 * Implmentation of hook_form_alter().
 */
function restrict_by_ip_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_admin_role') {
    // Add a custom submit function to handle role deletions.
    $form['#submit'][] =  'restrict_by_ip_admin_role_submit';
  }
  else if ($form_id == 'user_profile_form') {
    // Add restrict by ip form fields to user add/edit form
    global $user;
    if (user_access('administer site configuration') || user_access('administer restrict by ip')) {
      $uid = $form['#uid'];
      drupal_add_css(drupal_get_path('module', 'restrict_by_ip').'/restrict_by_ip.css', 'module', 'screen', FALSE);
      $usrdata_restrict_by_ip_address = "";
      // Grab the current restrict by ip data if it exists
      $address_entry = db_query('SELECT restrict_by_ip_address FROM {restrict_by_ip} WHERE uid = :uid', array(':uid' => $uid))->fetchfield(0);
      $form['rip'] = array(
        '#type'          => 'fieldset',
        '#attributes'    => array('class' => 'restrict-by-ip'),
        '#title'         => t('Restrict by IP settings'),
        '#weight'        => 5,
        '#collapsible'   => FALSE,
      );
      $form['rip']['restrict_by_ip_address'] = array(
        '#type'          => 'textfield',
        '#default_value' => $address_entry ? $address_entry : '',
        '#maxlength'     => 256,
        '#description'   => t('Enter IP Address Ranges in CIDR Notation seperated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting" target="_blank">click here</a>.<br /><strong>Leave field empty to disable IP restrictions for this user.</strong>'),
      );
      $form['#validate'][] = 'restrict_by_ip_user_profile_validate';
      $form['#submit'][] = 'restrict_by_ip_user_profile_submit';
    }
  }
  else if ($form_id == 'user_register') {
    global $user;
    if (user_access('administer site configuration') || user_access('administer restrict by ip')) {
      drupal_add_css(drupal_get_path('module', 'restrict_by_ip').'/restrict_by_ip.css', 'module', 'screen', FALSE);
      $form['rip'] = array(
        '#type'          => 'fieldset',
        '#attributes'    => array('class' => 'restrict-by-ip'),
        '#title'         => t('Restrict by IP settings'),
        '#weight'        => 5,
        '#collapsible'   => FALSE,
      );
      $form['rip']['restrict_by_ip_address'] = array(
        '#type'          => 'textfield',
        '#default_value' => '',
        '#maxlength'     => 256,
        '#description'   => t('Enter IP Address Ranges in CIDR Notation seperated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting" target="_blank">click here</a>.<br /><strong>Leave field empty to disable IP restrictions for this user.</strong>'),
      );
      $form['#validate'][] = 'restrict_by_ip_user_register_validate';
    }
  }
}

/**
 * Menu callback for general module settings
 */
function restrict_by_ip_general_settings() {
  drupal_set_title(t('Restrict by IP'));
  $form = array();
  $form['restrict_by_ip_header'] = array(
    '#type' => 'textfield',
    '#title' => t('Header to check'),
    '#description'    => t("This is the HTTP request header that contains the client IP Address.  It is sometimes re-written by reverse proxies and Content Distribution Networks.  If it is left blank it will be default to REMOTE_ADDR.  In most cases you can leave this blank."),    
    '#default_value' => variable_get('restrict_by_ip_header', 'REMOTE_ADDR'), 
  );
  return system_settings_form($form);
}

/**
 * Menu callback for restrict login settings
 */
function restrict_by_ip_login_settings() {
  drupal_set_title(t('Restrict login by IP'));
  $form = array();
  $form['restrict_by_ip_error_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Login denied error page'),
    '#description'    => t("This the address of the page to which the user will be redirected if they are not allowed to login. If you don't set this the user will not know why they couldn't login"),
    '#default_value' => variable_get('restrict_by_ip_error_page', ''),
  );
  $form['restrict_by_ip_login_range'] = array(
    '#type' => 'textfield',
    '#title' => t('Restrict global login to allowed IP range'),
    '#description' => t('To restrict login for ALL users, enter global IP Address Ranges in CIDR Notation separated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation click <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting">here</a>.<br />Leave field blank to disable IP restrictions for user login.'),
    '#default_value' => variable_get('restrict_by_ip_login_range', ''),
  );
  $form['restrict_login_by_ip_list'] = array(
    '#type' => 'fieldset',
    '#title' => t('Current login restrictions'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['restrict_login_by_ip_list']['list'] = array( 
    '#type' => 'markup',
    '#value' => theme('restrict_by_ip_login_list'),
  );
  return system_settings_form($form);
}

/**
 * Form callback to add/edit user IP restriction.
 */
function restrict_by_ip_login_add_edit_user($form_state, $account = NULL) {
  $form = array();
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#maxlength' => 60,
    '#autocomplete_path' => $account ? NULL : 'user/autocomplete',
  );
  $form['restriction'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed IP range'),
    '#description' => t('Enter IP Address Ranges in CIDR Notation separated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation click <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting">here</a>.'),
    '#maxlength' => 256,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save restriction'),
    '#suffix' => l('[Cancel]', 'admin/settings/restrict_by_ip/login'),
  );
  // Set up defaults if editing an existing restriction
  if ($account) {
//    drupal_set_message("SELECT restrict_by_ip_address FROM {restrict_by_ip} WHERE uid = :uid");
//    drupal_set_message("Account: ".print_r($account));
//    drupal_set_message("Uid: ".$account->uid);
    $restriction = db_query("SELECT restrict_by_ip_address FROM {restrict_by_ip} WHERE uid = :uid", array(':uid' => $account->uid))->fetchfield(0);
    $form['name']['#value'] = $account->name;
    $form['name']['#disabled'] = TRUE;
    $form['name']['autocomplete_path'] = NULL;
    $form['restriction']['#default_value'] = $restriction;
    $form['restriction']['#description'] .= t('<br />Leave field blank to remove restriction.');
  }
  return $form;
}

/**
 * Validation function for add/edit login IP restriction form.
 */
function restrict_by_ip_login_add_edit_user_validate($form, &$form_state) {
  // Check for valid user
  $uid = db_query("SELECT uid FROM {users} WHERE name= :fstate", array(':fstate' => $form_state['values']['name']))->fetchfield(0);
  if (!$uid) {
    form_set_error('name', t('Invalid user.'));
  }
  if (strlen($form_state['values']['restriction']) > 0) {
    $ret = _restrict_by_ip_validate_ip($form_state['values']['restriction']);
    if ($ret['result'] == FALSE) {
      form_set_error('restriction', t(implode('<br />', $ret['messages'])));
    }
  }
}

/**
 * Submit function for add/edit new login IP restriction form.
 */
function restrict_by_ip_login_add_edit_user_submit($form, &$form_state) {
  $uid = db_query("SELECT uid FROM {users} WHERE name= :fstate", array(':fstate' => $form_state['values']['name']))->fetchfield(0); 
  // Remove any existing settings
  db_query("DELETE FROM {restrict_by_ip} WHERE uid = :uid", array(':uid' => $uid));
  // Insert new settings
  if (strlen($form_state['values']['restriction']) > 0) {
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :fstate)", array(':uid' => $uid, ':fstate' => $form_state['values']['restriction']));
  }
  drupal_set_message("User restriction has been saved.");
}

/**
 * Menu callback for restrict role settings
 */
function restrict_by_ip_role_settings() {
  drupal_set_title(t('Restrict role by IP'));
  $form = array();
  $user_roles = user_roles();
  if (is_array($user_roles)) {
    foreach ($user_roles as $rid => $name) {
      // Do not list anonymous or authenticated roles
      if ($rid != 1 && $rid != 2) {
        $form['restrict_role_by_ip_' . $rid] = array(
          '#type' => 'fieldset',
          '#title' => t($name),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $form['restrict_role_by_ip_' . $rid]['restrict_by_ip_role' . $rid] = array(
          '#type' => 'textfield',
          '#title' => t('Allowed IP range'),
          '#description' => t('Enter IP Address Ranges in CIDR Notation seperated with semi-colons, with no trailing semi-colon. E.G. 10.20.30.0/24;192.168.199.1/32;1.0.0.0/8<br />For more information on CIDR notation click <a href="http://www.brassy.net/2007/mar/cidr_basic_subnetting">here</a>.<br />Leave field blank to disable IP restrictions for ' . $name),
          '#default_value' => variable_get('restrict_by_ip_role' . $rid, ''),
        );
      }
    }
  }
  return system_settings_form($form);
}

/**
 * Validation for settings form. Used to validate all entered IP addresses and ranges.
 */
function restrict_by_ip_settings_validate($form, &$form_state) {
  if (is_array($form_state['values'])) {
    foreach ($form_state['values'] as $element_id => $element) {
      if (strstr($element_id, 'restrict_by_ip_role') || strstr($element_id, 'restrict_by_ip_login_range')) {
        $range = $element;
        if (strlen($range) > 0) {
          $ret = _restrict_by_ip_validate_ip($range);
          if ($ret['result'] == FALSE) {
            form_set_error($element_id, t(implode('<br />', $ret['messages'])));
          }
        }
      }
    }
  }
}

/**
 * Custom validation function for the user_register form page.
 */
function restrict_by_ip_user_register_validate($form, &$form_state) {
  if (strlen($form_state['values']['restrict_by_ip_address']) > 0) {
    $ret = _restrict_by_ip_validate_ip($form_state['values']['restrict_by_ip_address']);
    if ($ret['result'] == FALSE) {
      form_set_error('restrict_by_ip_address', t(implode('<br />', $ret['messages'])));
    }
  }
}

/**
 * Custom validation function for the user_profile_form page.
 */
function restrict_by_ip_user_profile_validate($form, &$form_state) {
  if (strlen($form_state['values']['restrict_by_ip_address']) > 0) {
    $ret = _restrict_by_ip_validate_ip($form_state['values']['restrict_by_ip_address']);
    if ($ret['result'] == FALSE) {
      form_set_error('restrict_by_ip_address', t(implode('<br />', $ret['messages'])));
    }
  }
}

/**
 * Custom submit function for the user_profile_form page.
 */
function restrict_by_ip_user_profile_submit($form, &$form_state) {
  // Remove any existing restrictions
  db_query("DELETE FROM {restrict_by_ip} WHERE uid = :uid", array(':uid' => $form['#uid']));
  if (strlen($form_state['values']['restrict_by_ip_address']) > 0) {
    // Add new restrictions
    db_query("INSERT INTO {restrict_by_ip} (uid, restrict_by_ip_address) VALUES (:uid, :fstate)", array(':uid' => $form['#uid'], ':fstate' => $form_state['values']['restrict_by_ip_address']));
  }
}

/**
 * Custom submit function for user_admin_role form.
 */
function restrict_by_ip_admin_role_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Delete role')) {
    // Remove any IP restrictions from roles upon deletion of role.
    variable_del('restrict_by_ip_role' . $form_state['values']['rid']);
  }
}

/**
 * Perform an IP restriction check for all roles belonging to the given user.
 */
function restrict_by_ip_role_check(&$user){
  // Get all roles for the specified user
  $result = db_query('select rid FROM {users_roles} where uid = :uid', array(':uid' => $user->uid));
  // Get header from configurable header setting
  $header = variable_get('restrict_by_ip_header', 'REMOTE_ADDR');
  if (key_exists($header, $_SERVER)) {
    $ip2check = $_SERVER[$header];
  } else {
//    drupal_set_message('Key '.$header.' not found is $_SERVER, taking REMOTE_ADDR instead ('.$_SERVER['REMOTE_ADDR'].') for user '.$user->uid);
    $ip2check = $_SERVER['REMOTE_ADDR'];      
  }
  // Check each role belonging to specified user
// ($row = $result->fetchAssoc()) {
  foreach ($result as $row) {
    $rid = $row->rid;
    $ranges = variable_get('restrict_by_ip_role' . $rid, '');
    // Only check IP if an IP restriction is set for this role
    if (strlen($ranges) > 0) {
      $ipaddresses = explode(';', $ranges);
      $match = FALSE;
      foreach ($ipaddresses as $ipaddress) {
        if (_restrict_by_ip_cidrcheck($ip2check, $ipaddress)) {
          $match = TRUE;
        }
      }
      if (!$match) {
        unset($user->roles[$rid]);
      }
    }
  }
}

/**
 * Login function
 * Checks the user's ip address on login
 * If they are not restricted, or logging in from the appropriate address
 * allow logon to continue. If not redirect to a designated page
 */
function _restrict_by_ip_login(&$user) {
  if ($user->uid != 0) {
    // Get header from configurable header setting
    $header = variable_get('restrict_by_ip_header', 'REMOTE_ADDR');
    if (key_exists($header, $_SERVER)) {
      $ip2check = $_SERVER[$header];
    } else {
      $ip2check = $_SERVER['REMOTE_ADDR'];      
    }

    // Check for global login IP restrictions and validate against
    $global_data = variable_get('restrict_by_ip_login_range', '');
    if (strlen($global_data) > 0) {
      $valid = FALSE;
      $ipaddresses = explode(';', $global_data);
      if (is_array($ipaddresses)) {
        foreach ($ipaddresses as $ipaddress) {
          if (_restrict_by_ip_cidrcheck($ip2check, $ipaddress)) {
            $valid = TRUE;
          }
        }
      } 
//      $valid=TRUE;
      if (!$valid) {
        // Log the error with the ip address
        watchdog('user', t('Session closed for %name - Invalid IP. '.$ip2check, array('%name' => $user->name)));
        // Destroy the current session
        session_destroy();
        module_invoke_all('user', 'logout', NULL, $user);
        // Load the anonymous user
        $user = drupal_anonymous_user();
        // unset destination required to force them to the ip page during drupal_goto()
        if (isset($_REQUEST['destination'])) {
          unset($_REQUEST['destination']);
        }
        // Goto the page detailed in the site configuration - restrict by ip - settings page
        drupal_goto(variable_get('restrict_by_ip_error_page', '0'));
      }
    }

    // Check for individual user IP restrictions and validate against them
    $usrdata = db_query('SELECT * FROM {restrict_by_ip} WHERE uid = :uid', array(':uid' => $user->uid))->fetchObject();
    $logonvalid = FALSE;
    // If the user has restrict by ip address set
    if ($usrdata) {
      $ipaddresses = explode(";", $usrdata->restrict_by_ip_address);
      // Check each valid ip address in database against users ip address
      // If one matches allow logon
      foreach ($ipaddresses as $ipaddress) {
        if (_restrict_by_ip_cidrcheck($ip2check, $ipaddress)) { 
          $logonvalid = TRUE; 
        }
      }
      // Restrict by ip address is set and no addresses match users ip address
      if (!$logonvalid) {
        // Log the error with the ip address
        watchdog('user', t('Session closed for %name - Invalid IP. '.$ip2check, array('%name' => $user->name)));
        // Destroy the current session
        session_destroy();
        module_invoke_all('user', 'logout', NULL, $user);
        // Load the anonymous user
        $user = drupal_anonymous_user();
        // unset destination required to force them to the ip page during drupal_goto()
        if (isset($_REQUEST['destination'])) {
          unset($_REQUEST['destination']);
        }
        // Goto the page detailed in the site configuration - restrict by ip - settings page
        drupal_goto(variable_get('restrict_by_ip_error_page', '0'));
      }
    }
  }
}

/**
 * This function just makes sure the user input for the ip address
 * section is valid. 
 */
function _restrict_by_ip_validate_ip($ip_address) {
  $ret = array('result' => TRUE, 'messages' => '');
  $ipaddresses = explode(";", $ip_address);

  // Check each ip address individually
  foreach ($ipaddresses as $ipaddress) {
    // Seperate in to address and cidr mask
    $cidr = explode("/", $ipaddress);
    // Check address and cidr mask entered
    if (count($cidr) == 2) {
      $ipaddr = explode(".", $cidr[0]);
      // Check four octets entered
      if (count($ipaddr) == 4) {
        // Check each octet is valid - numeric and 0 < value < 255
        for ($i=0; $i<count($ipaddr); $i++) {
          if ((!is_numeric($ipaddr[$i])) || ($ipaddr[$i] < 0) || ($ipaddr[$i] > 255)) {
            $ret['messages'][] .= 'Illegal value for an IP Address. Each IP Address must be valid.  Check IP Address ' . $ipaddress;
            $ret['result'] = FALSE;
          }
        }
        // Check cidr mask value - numeric and 0 < value < 33
        if((!is_numeric($cidr[1])) || ($cidr[1]<1) || ($cidr[1]>32)) {
          $ret['messages'][] .= 'Illegal value for CIDR. Please correct CIDR with value of ' . $ipaddress;
          $ret['result'] = FALSE;
        }
      }
      else {
        $ret['messages'][] .= 'IP Address Incorrect Number of Octets. Check IP Address ' . $ipaddress;
        $ret['result'] = FALSE;
      }
    }
    else {
      $ret['messages'][] .= 'IP Address in Incorrect Format. Check IP Address ' . $ipaddress;
      $ret['result'] = FALSE;
    }
  }
  return $ret;
}

/**
 * Check ip address against a network in cidr notation. E.g:
 * _restrict_by_ip_cidrcheck('192.168.10.100','192.168.10.0/24'); returns 1
 * _restrict_by_ip_cidrcheck('192.168.10.100','192.168.12.0/24'); returns 0
 */ 
function _restrict_by_ip_cidrcheck($iptocheck, $ipslashcidr) {
  // Seperate ip address and cidr mask
  $netmask = explode("/", $ipslashcidr);
  // Get valid network as long 
  $ip_net = ip2long($netmask[0]);
  // Get valid network mask as long
  $ip_mask = ~((1 << (32 - $netmask[1])) - 1);
  // Get ip address to check as long
  $ip_ip = ip2long($iptocheck);
  // Mask ip address to check to get subnet
  $ip_ip_net = $ip_ip & $ip_mask;
  // Only returns 1 if the valid network 
  //and the subnet of the ip address 
  //to check are the same
  return ($ip_ip_net == $ip_net);
}

/**
 * Theme function to return a list of existing IP restrictions on user login.
 */
function theme_restrict_by_ip_login_list() {
  $header = array(t("Username"), t("IP Restriction"), t("Edit"));
  $rows = array();
  // Handle user one as a special case
  $row = db_query("SELECT u.name, rbi.restrict_by_ip_address as restriction FROM {users} u LEFT JOIN {restrict_by_ip} rbi ON rbi.uid = u.uid WHERE u.uid = 1 ")->fetchObject();
  $rows[] = array($row->name . ' (DRUPAL USER 1)', isset($row->restriction) ? $row->restriction : '<strong><span style="color: red">No Restriction</span></strong>', l('edit', 'admin/settings/restrict_by_ip/login/edit/1', array('query' => array('destination' => 'admin/settings/restrict_by_ip/login'))));

  // Grab all other restrictions and list beneath
  $result = db_query("SELECT u.name, rbi.uid, rbi.restrict_by_ip_address as restriction FROM {restrict_by_ip} rbi INNER JOIN {users} u ON rbi.uid = u.uid WHERE u.uid != 1 ORDER BY rbi.uid ASC");
  foreach ($result as $row) {
    $rows[] = array($row->name, $row->restriction, l('edit', 'admin/settings/restrict_by_ip/login/edit/' . $row->uid, array('query' => array('destination' => 'admin/settings/restrict_by_ip/login'))));
  }
  return theme('table', $header, $rows) . l('Add new IP restriction for user', 'admin/settings/restrict_by_ip/login/add', array('query' => array('destination' => 'admin/settings/restrict_by_ip/login')));
}


